# Generated by Django 3.0.8 on 2022-08-26 14:06

import apps.catalog.cache
import apps.catalog.models.product
import apps.commons.models
import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('feedback', '0008_auto_20220324_1943'),
        ('domains', '0015_auto_20220621_1513'),
    ]

    operations = [
        migrations.CreateModel(
            name='AttributeProducValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_number', models.FloatField(blank=True, db_index=True, null=True, verbose_name='Числовое значение')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция')),
            ],
            options={
                'verbose_name': 'Атрибут-Товар-Значение',
                'verbose_name_plural': 'Атрибут-Товар-Значение',
                'ordering': ('position', 'attribute__position'),
            },
        ),
        migrations.CreateModel(
            name='AttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(db_index=True, max_length=527, verbose_name='Значение')),
                ('slug', models.SlugField(max_length=527, verbose_name='Слаг')),
                ('id_1c', models.UUIDField(blank=True, help_text='Заполняется автоматически', null=True, unique=True, verbose_name='Идентификатор 1С')),
            ],
            options={
                'verbose_name': 'Значение атрибута',
                'verbose_name_plural': 'Справочник атрибутов',
                'ordering': ['value'],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255, verbose_name='SEO заголовок')),
                ('meta_description', models.TextField(blank=True, default='', help_text='\n                                        ||object|| - Заголовок объекта\n                                        ||site|| - Название сайта\n                                        ||city|| - Название города текущего поддомена\n                                        ||city1|| - Название города текущего поддомена в предложном падеже\n                                        ||price|| - Цена товара\n                                        ', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Meta Keywords')),
                ('webp_image', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp')),
                ('webp_hash_image', models.TextField(blank=True, null=True, verbose_name='Хэш для webp')),
                ('webp_image_s', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_small')),
                ('webp_hash_image_s', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_small')),
                ('webp_image_m', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_medium')),
                ('webp_hash_image_m', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_medium')),
                ('webp_image_l', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_large')),
                ('webp_hash_image_l', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_large')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.commons.models.image_directory_path, verbose_name='Изображение')),
                ('image_md5', models.CharField(blank=True, default='', help_text='Заполняется автоматически', max_length=63, verbose_name='Хэш изображения')),
                ('id_1c', models.UUIDField(blank=True, null=True, verbose_name='id_1c')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('is_index', models.BooleanField(default=False, verbose_name='На главной')),
                ('title', models.CharField(db_index=True, max_length=127, verbose_name='Название')),
                ('slug', models.SlugField(verbose_name='Слаг')),
                ('description', models.TextField(blank=True, default='', verbose_name='Описание')),
                ('meta_message', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', verbose_name='Текст на странице')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('domain', models.ManyToManyField(blank=True, to='domains.Domain', verbose_name='Домены')),
                ('not_discount', models.ManyToManyField(blank=True, null=True, related_name='brands_not_discount', to='domains.Domain', verbose_name='Не применять скидку для доменов')),
            ],
            options={
                'verbose_name': 'Производитель',
                'verbose_name_plural': 'производители',
                'ordering': ['title'],
            },
            bases=(apps.commons.models.WithBreadcrumbs, models.Model),
        ),
        migrations.CreateModel(
            name='Calc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=125, verbose_name='Название')),
                ('diameter', models.FloatField(blank=True, default=0, verbose_name='Диаметр')),
                ('pipe', models.CharField(choices=[('wall', 'Через стену'), ('roof', 'Через крышу')], default='wall', max_length=5, verbose_name='Выход стены')),
                ('insulation', models.BooleanField(default=False, verbose_name='Утплитель')),
                ('life_tile', models.PositiveSmallIntegerField(default=0, verbose_name='Срок службы')),
                ('sort', models.PositiveSmallIntegerField(default=0, verbose_name='Сортировка')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Brand', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Вариант вывода комплектующих',
                'verbose_name_plural': 'Варианты вывода комплектующих',
                'ordering': ['sort'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255, verbose_name='SEO заголовок')),
                ('meta_description', models.TextField(blank=True, default='', help_text='\n                                        ||object|| - Заголовок объекта\n                                        ||site|| - Название сайта\n                                        ||city|| - Название города текущего поддомена\n                                        ||city1|| - Название города текущего поддомена в предложном падеже\n                                        ||price|| - Цена товара\n                                        ', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Meta Keywords')),
                ('webp_image', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp')),
                ('webp_hash_image', models.TextField(blank=True, null=True, verbose_name='Хэш для webp')),
                ('webp_image_s', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_small')),
                ('webp_hash_image_s', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_small')),
                ('webp_image_m', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_medium')),
                ('webp_hash_image_m', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_medium')),
                ('webp_image_l', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_large')),
                ('webp_hash_image_l', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_large')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.commons.models.image_directory_path, verbose_name='Изображение')),
                ('image_md5', models.CharField(blank=True, default='', help_text='Заполняется автоматически', max_length=63, verbose_name='Хэш изображения')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Активен')),
                ('is_import_active', models.BooleanField(default=True, verbose_name='В выгрузке')),
                ('title', models.CharField(db_index=True, max_length=127, verbose_name='Название')),
                ('slug', models.SlugField(max_length=255, verbose_name='Слаг')),
                ('code', models.CharField(blank=True, max_length=63, null=True, verbose_name='Артикул')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', verbose_name='Описание')),
                ('last_description', models.TextField(blank=True, default='', verbose_name='Описание')),
                ('stock', models.PositiveIntegerField(default=0, verbose_name='Остаток на складе')),
                ('views', models.PositiveIntegerField(default=0, editable=False, verbose_name='Просмотры')),
                ('weight', models.PositiveIntegerField(default=0, verbose_name='Масса')),
                ('width', models.PositiveIntegerField(default=0, verbose_name='Ширина')),
                ('height', models.PositiveIntegerField(default=0, verbose_name='Высота')),
                ('length', models.PositiveIntegerField(default=0, verbose_name='Длина')),
                ('hit', models.BooleanField(default=False, verbose_name='Хит')),
                ('new', models.BooleanField(default=False, verbose_name='Новинка')),
                ('offer', models.BooleanField(default=False, verbose_name='Акция')),
                ('top_hit', models.BooleanField(default=False, help_text='Блок на главной', verbose_name='Топ продаж')),
                ('id_1c', models.UUIDField(blank=True, help_text='Заполняется автоматически', null=True, unique=True, verbose_name='Идентификатор 1С')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('keywords', models.CharField(blank=True, default='', max_length=125, verbose_name='Ключевые слова')),
                ('lastStockQuantityBoolean', models.BooleanField(default=False)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ('title',),
            },
            bases=(apps.commons.models.WithBreadcrumbs, models.Model),
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=557, verbose_name='Название')),
                ('slug', models.SlugField(max_length=557, verbose_name='Слаг')),
                ('type', models.CharField(choices=[('dict', 'Справочник'), ('number', 'Числовой')], default='dict', max_length=7, verbose_name='Тип атрибута')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция')),
                ('brand_position', models.PositiveIntegerField(default=0, verbose_name='Позиция для производителей')),
                ('id_1c', models.UUIDField(blank=True, help_text='Заполняется автоматически', null=True, unique=True, verbose_name='Идентификатор 1С')),
                ('is_collapsed', models.BooleanField(default=True, verbose_name='Свернут по умолчанию')),
                ('visible_on_attrs', models.BooleanField(default=True, verbose_name='Показывать в атрибутах')),
                ('visible_on_brand', models.BooleanField(default=False, verbose_name='Показывать в производителях')),
            ],
            options={
                'verbose_name': 'Атрибут',
                'verbose_name_plural': 'Атрибуты',
                'ordering': ('position',),
            },
        ),
        migrations.CreateModel(
            name='ReplaceAttr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('replace_slug', models.CharField(max_length=125, unique=True, verbose_name='Переменная')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.ProductAttribute', verbose_name='Атрибут')),
            ],
            options={
                'verbose_name': 'Переменная для описания',
                'verbose_name_plural': 'Переменные для описания',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ProductVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, default='', max_length=127, verbose_name='Ссылка')),
                ('file', models.FileField(blank=True, upload_to=apps.catalog.models.product.product_image_directory_path, verbose_name='Изображение')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='catalog.Product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'видео товара',
                'verbose_name_plural': 'Видео товаров',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('webp_image', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp')),
                ('webp_hash_image', models.TextField(blank=True, null=True, verbose_name='Хэш для webp')),
                ('webp_image_s', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_small')),
                ('webp_hash_image_s', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_small')),
                ('webp_image_m', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_medium')),
                ('webp_hash_image_m', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_medium')),
                ('webp_image_l', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_large')),
                ('webp_hash_image_l', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_large')),
                ('image', models.ImageField(upload_to=apps.catalog.models.product.product_image_directory_path, verbose_name='Изображение')),
                ('image_md5', models.CharField(blank=True, default='', help_text='Заполняется автоматически', max_length=63, verbose_name='Хэш изображения')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery', to='catalog.Product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Изображение товара',
                'verbose_name_plural': 'Изображения товаров',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='ProductDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=127, verbose_name='Заголовок')),
                ('file', models.FileField(upload_to=apps.catalog.models.product.product_image_directory_path, verbose_name='Изображение')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='docs', to='catalog.Product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'документация товара',
                'verbose_name_plural': 'Документации товаров',
                'ordering': ['position'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='attributes',
            field=models.ManyToManyField(through='catalog.AttributeProducValue', to='catalog.ProductAttribute', verbose_name='Атрибуты'),
        ),
        migrations.AddField(
            model_name='product',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='brand_products', to='catalog.Brand'),
        ),
        migrations.AddField(
            model_name='product',
            name='domain',
            field=models.ManyToManyField(blank=True, to='domains.Domain', verbose_name='Домены'),
        ),
        migrations.AddField(
            model_name='product',
            name='is_discount',
            field=models.ManyToManyField(blank=True, null=True, related_name='product_discount', to='domains.Domain', verbose_name='Не применять скидку 5% на доменах'),
        ),
        migrations.AddField(
            model_name='product',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variations', to='catalog.Product', verbose_name='Родительский товар'),
        ),
        migrations.AddField(
            model_name='product',
            name='related_products',
            field=models.ManyToManyField(blank=True, to='catalog.Product', verbose_name='Сопутствующие товары'),
        ),
        migrations.CreateModel(
            name='InStockNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_email', models.CharField(max_length=255, verbose_name='Email пользователя')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domains.Domain', verbose_name='Домен')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Product', verbose_name='Продукт')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255, verbose_name='SEO заголовок')),
                ('meta_description', models.TextField(blank=True, default='', help_text='\n                                        ||object|| - Заголовок объекта\n                                        ||site|| - Название сайта\n                                        ||city|| - Название города текущего поддомена\n                                        ||city1|| - Название города текущего поддомена в предложном падеже\n                                        ||price|| - Цена товара\n                                        ', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Meta Keywords')),
                ('webp_image', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp')),
                ('webp_hash_image', models.TextField(blank=True, null=True, verbose_name='Хэш для webp')),
                ('webp_image_s', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_small')),
                ('webp_hash_image_s', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_small')),
                ('webp_image_m', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_medium')),
                ('webp_hash_image_m', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_medium')),
                ('webp_image_l', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_large')),
                ('webp_hash_image_l', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_large')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.commons.models.image_directory_path, verbose_name='Изображение')),
                ('image_md5', models.CharField(blank=True, default='', help_text='Заполняется автоматически', max_length=63, verbose_name='Хэш изображения')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('title', models.CharField(db_index=True, max_length=127, verbose_name='Название')),
                ('slug', models.SlugField(verbose_name='Слаг')),
                ('description', models.TextField(blank=True, default='', verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('products', models.ManyToManyField(blank=True, related_name='collections', to='catalog.Product', verbose_name='Товары')),
            ],
            options={
                'verbose_name': 'Коллекция',
                'verbose_name_plural': 'Коллекции',
            },
            bases=(apps.commons.models.WithBreadcrumbs, models.Model),
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255, verbose_name='SEO заголовок')),
                ('meta_description', models.TextField(blank=True, default='', help_text='\n                                        ||object|| - Заголовок объекта\n                                        ||site|| - Название сайта\n                                        ||city|| - Название города текущего поддомена\n                                        ||city1|| - Название города текущего поддомена в предложном падеже\n                                        ||price|| - Цена товара\n                                        ', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Meta Keywords')),
                ('webp_image', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp')),
                ('webp_hash_image', models.TextField(blank=True, null=True, verbose_name='Хэш для webp')),
                ('webp_image_s', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_small')),
                ('webp_hash_image_s', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_small')),
                ('webp_image_m', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_medium')),
                ('webp_hash_image_m', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_medium')),
                ('webp_image_l', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_large')),
                ('webp_hash_image_l', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_large')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Активна')),
                ('is_import_active', models.BooleanField(default=True, verbose_name='В выгрузке')),
                ('is_index', models.BooleanField(default=False, verbose_name='На главной')),
                ('is_hide', models.BooleanField(default=False, verbose_name='Скрыт')),
                ('title', models.CharField(db_index=True, max_length=127, verbose_name='Название (H1)')),
                ('short_title', models.CharField(blank=True, default='', max_length=125, verbose_name='Краткое название')),
                ('description', models.TextField(blank=True, default='', verbose_name='Описание')),
                ('product_description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', help_text='||brand|| - Производитель', verbose_name='Описание для продукта')),
                ('old_product_description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', help_text='||brand|| - Производитель', verbose_name='Описание для продукта')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/categories/', verbose_name='Изображение')),
                ('image_md5', models.CharField(blank=True, default='', help_text='Заполняется автоматически', max_length=63, verbose_name='Хэш изображения')),
                ('id_1c', models.UUIDField(blank=True, help_text='Заполняется автоматически', null=True, verbose_name='Идентификатор 1С')),
                ('seo_text', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', verbose_name='Текст')),
                ('seo_img', models.ImageField(blank=True, default='', upload_to='images/categories/seo/', verbose_name='Изображение')),
                ('show_on_menu', models.BooleanField(default=False, verbose_name='Отображать в выбранных категориях')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('saved_attrs_children', models.BooleanField(default=False, help_text='Обновляет дочерние категории каждый раз когда сохраняется текущая категория', verbose_name='Сохранить текущие атрибуты для дочерних категорий')),
                ('saved_attrs_parent', models.BooleanField(default=False, help_text='Обновляет атрибуты', verbose_name='Получить атрибуты родительской категории')),
                ('dont_save_attrs_parent', models.BooleanField(blank=True, default=False, help_text='Блокирует получение атрибутов от родительской категории', verbose_name='не получать атрибуты родителя')),
                ('type', models.CharField(choices=[('category', 'Категория'), ('alias', 'Алиас')], max_length=125, verbose_name='Тип')),
                ('search', models.CharField(blank=True, default='', max_length=125, verbose_name='Поисковый запрос')),
                ('hit_check_products', models.BooleanField(default=False, verbose_name='Определять хит по значку "Является хитом" в товаре')),
                ('discount_brands_save_child', models.BooleanField(default=False, verbose_name='Сохранять бренды для детей')),
                ('unlink_brand', models.BooleanField(default=False, verbose_name='Убрать ссылку с производителя')),
                ('keywords', models.CharField(blank=True, default='', max_length=250, verbose_name='Ключевые слова')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('visible_mounting', models.BooleanField(default=False, verbose_name='Показывать пункт монтаж')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('alias_products', models.ManyToManyField(blank=True, related_name='aliases', to='catalog.Product', verbose_name='Продукты')),
                ('brands', models.ManyToManyField(blank=True, to='catalog.Brand', verbose_name='Производители')),
                ('discount_brands', models.ManyToManyField(blank=True, related_name='discount_categories', to='catalog.Brand', verbose_name='Без онлайн скидки')),
                ('discount_category', models.ManyToManyField(blank=True, null=True, related_name='discount_category', to='domains.Domain', verbose_name='Не применять скидку для доменов')),
                ('domain', models.ManyToManyField(blank=True, to='domains.Domain', verbose_name='Домены')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='catalog.Catalog', verbose_name='Родительская категория')),
                ('receivers', models.ManyToManyField(blank=True, null=True, to='feedback.Recipient', verbose_name='Email для уведомления о покупке в категории')),
                ('show_on_categories', models.ManyToManyField(blank=True, null=True, related_name='_catalog_show_on_categories_+', to='catalog.Catalog', verbose_name='Отображать в категориях')),
            ],
            options={
                'verbose_name': 'Каталог',
                'verbose_name_plural': 'Каталог',
            },
            bases=(models.Model, apps.commons.models.WithBreadcrumbs, apps.catalog.cache.CategoryCacheMixin),
        ),
        migrations.CreateModel(
            name='CalcItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(default=1, verbose_name='Количество')),
                ('coefficient', models.PositiveSmallIntegerField(default=0, verbose_name='Коэффициент')),
                ('sort', models.PositiveSmallIntegerField(default=0, verbose_name='Сортировка')),
                ('line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='catalog.Calc', verbose_name='Вариант комплектующих')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Товар подборки',
                'verbose_name_plural': 'Товары подборки',
                'ordering': ['sort'],
            },
        ),
        migrations.AddField(
            model_name='attributeproducvalue',
            name='attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_values', to='catalog.ProductAttribute'),
        ),
        migrations.AddField(
            model_name='attributeproducvalue',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_attributes', to='catalog.Product'),
        ),
        migrations.AddField(
            model_name='attributeproducvalue',
            name='value_dict',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.AttributeValue', verbose_name='Значение из справочника'),
        ),
        migrations.CreateModel(
            name='AlterSeoCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alter_seo_title_product', models.TextField(blank=True, null=True, verbose_name='Альтернативный СЕО заголовок (товары)')),
                ('alter_seo_desc_product', models.TextField(blank=True, null=True, verbose_name='Альтернативный СЕО текст (товары)')),
                ('alter_seo_title_category', models.TextField(blank=True, null=True, verbose_name='Альтернативный СЕО заголовок (категории)')),
                ('alter_seo_desc_category', models.TextField(blank=True, null=True, verbose_name='Альтернативный СЕО текст (категории)')),
                ('category', models.ManyToManyField(related_name='alter_seo_cats', to='catalog.Catalog', verbose_name='Категории')),
                ('category_exclude', models.ManyToManyField(to='catalog.Catalog', verbose_name='Категории-исключения')),
            ],
            options={
                'verbose_name': 'Альтер СЕО',
                'verbose_name_plural': 'Альтер СЕО',
            },
        ),
        migrations.CreateModel(
            name='AliasAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.PositiveIntegerField(blank=True, default=0, verbose_name='Минимальное значение')),
                ('max_value', models.PositiveIntegerField(blank=True, default=0, verbose_name='Максимальное значение')),
                ('sort', models.PositiveSmallIntegerField(default=0, verbose_name='Сортировка')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alias_attrs', to='catalog.ProductAttribute', verbose_name='Атрибут')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alias_attrs', to='catalog.Catalog', verbose_name='Категория')),
                ('value', models.ManyToManyField(blank=True, to='catalog.AttributeValue')),
            ],
            options={
                'verbose_name': 'Атрибут алиаса',
                'verbose_name_plural': 'Атрибуты алиаса',
                'ordering': ['sort'],
            },
        ),
        migrations.CreateModel(
            name='Alias',
            fields=[
            ],
            options={
                'verbose_name': 'Алиас',
                'verbose_name_plural': 'Алиасы',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('catalog.catalog',),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('catalog.catalog',),
        ),
        migrations.CreateModel(
            name='SlugCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=250, verbose_name='Слаг')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slugs', to='catalog.Catalog', verbose_name='Категория')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domains.Domain', verbose_name='Домен')),
            ],
            options={
                'verbose_name': 'Урл',
                'verbose_name_plural': 'Урлы',
                'ordering': ['id'],
                'unique_together': {('domain', 'category'), ('domain', 'category', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='SeoCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255, verbose_name='SEO заголовок')),
                ('meta_description', models.TextField(blank=True, default='', help_text='\n                                        ||object|| - Заголовок объекта\n                                        ||site|| - Название сайта\n                                        ||city|| - Название города текущего поддомена\n                                        ||city1|| - Название города текущего поддомена в предложном падеже\n                                        ||price|| - Цена товара\n                                        ', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Meta Keywords')),
                ('meta_message', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', verbose_name='Текст на странице')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seo', to='catalog.Catalog', verbose_name='Категория')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domains.Domain', verbose_name='Домен')),
            ],
            options={
                'verbose_name': 'SEO',
                'verbose_name_plural': 'SEO',
                'ordering': ['id'],
                'unique_together': {('domain', 'category')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Оценка')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='catalog.Product', verbose_name='Продукт')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
                'ordering': ['id'],
                'unique_together': {('product', 'user')},
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='catalog.Category', verbose_name='Категория'),
        ),
        migrations.CreateModel(
            name='Prices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Розничная цена')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Старая Розничная цена')),
                ('price_1', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена контрагента №1')),
                ('price_2', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена контрагента №2')),
                ('price_3', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена контрагента №3')),
                ('percent', models.FloatField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Процент скидки')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domains.Domain', verbose_name='Домен')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='catalog.Product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Цена',
                'verbose_name_plural': 'Цены',
                'ordering': ['id'],
                'unique_together': {('product', 'domain')},
            },
        ),
        migrations.CreateModel(
            name='MessageCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='domains.Domain', verbose_name='Город')),
                ('recipients', models.ManyToManyField(blank=True, to='feedback.Recipient', verbose_name='Получатели')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='catalog.Category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'ordering': ['domain'],
            },
        ),
        migrations.CreateModel(
            name='CategoryAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveSmallIntegerField(default=0, verbose_name='Сортировка')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_attrs', to='catalog.ProductAttribute', verbose_name='Атрибут')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attrs', to='catalog.Catalog', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Атрибут категории',
                'verbose_name_plural': 'Атрибуты категорий',
                'ordering': ['sort'],
                'unique_together': {('category', 'attribute')},
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='catalog_pro_search__6e8905_gin'),
        ),
        migrations.AlterUniqueTogether(
            name='messagecategory',
            unique_together={('category', 'domain')},
        ),
    ]
