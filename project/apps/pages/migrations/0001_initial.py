# Generated by Django 3.0.8 on 2022-08-26 14:05

import apps.commons.models
import ckeditor_uploader.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('domains', '0015_auto_20220621_1513'),
        ('catalog', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasePage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255, verbose_name='SEO заголовок')),
                ('meta_description', models.TextField(blank=True, default='', help_text='\n                                        ||object|| - Заголовок объекта\n                                        ||site|| - Название сайта\n                                        ||city|| - Название города текущего поддомена\n                                        ||city1|| - Название города текущего поддомена в предложном падеже\n                                        ||price|| - Цена товара\n                                        ', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Meta Keywords')),
                ('webp_image', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp')),
                ('webp_hash_image', models.TextField(blank=True, null=True, verbose_name='Хэш для webp')),
                ('webp_image_s', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_small')),
                ('webp_hash_image_s', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_small')),
                ('webp_image_m', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_medium')),
                ('webp_hash_image_m', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_medium')),
                ('webp_image_l', models.TextField(blank=True, null=True, verbose_name='Полный путь до webp_large')),
                ('webp_hash_image_l', models.TextField(blank=True, null=True, verbose_name='Хэш для webp_large')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.commons.models.image_directory_path, verbose_name='Изображение')),
                ('image_md5', models.CharField(blank=True, default='', help_text='Заполняется автоматически', max_length=63, verbose_name='Хэш изображения')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('type', models.CharField(choices=[('page', 'Страница'), ('post', 'Пост')], default='page', max_length=7, verbose_name='Тип страницы')),
                ('title', models.CharField(db_index=True, max_length=127, verbose_name='Название')),
                ('full_title', models.CharField(blank=True, db_index=True, default='', max_length=250, verbose_name='Полное название')),
                ('description', models.TextField(blank=True, default='', verbose_name='Описание')),
                ('slug', models.SlugField(verbose_name='Слаг')),
                ('template', models.CharField(blank=True, choices=[(None, 'Текстовая страница'), ('index', 'Главная'), ('catalog', 'Каталог'), ('calculator', 'Калькулятор дымоходов'), ('cart', 'Корзина'), ('order', 'Оформление заказа'), ('mounting', 'Монтаж отопительных приборов'), ('reviews', 'Отзывы'), ('wishlist', 'Избранное'), ('about', 'О компании'), ('services', 'Услуги'), ('pages', 'Полезные статьи'), ('offers', 'Акции'), ('brands', 'Производители'), ('compare', 'Сравнение'), ('address', 'Адреса магазинов'), ('search', 'Страница поиска'), ('cooperation', 'Сотрудничество'), ('sale', 'Распродажа'), ('news', 'Новости'), ('sitemap', 'Карта сайта'), ('privacy', 'Политика конфиденциальности'), ('personal', 'Обработка персональных данных'), ('public', 'Публичная оферта'), ('reset', 'Сброс пароля'), ('lk', 'Личный кабинет'), ('change_pass', 'Смена пароля'), ('orders', 'Мои заказы')], max_length=125, null=True, verbose_name='Шаблон')),
                ('has_sidebar', models.BooleanField(default=True, verbose_name='Показывать сайдбар')),
                ('hide_sitemap', models.BooleanField(default=False, verbose_name='Скрыть в карте сайта')),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата публикации')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('domain', models.ManyToManyField(blank=True, to='domains.Domain', verbose_name='Домены')),
            ],
            options={
                'verbose_name': 'Страница',
                'verbose_name_plural': 'Страницы',
            },
            bases=(apps.commons.models.WithBreadcrumbs, models.Model),
        ),
        migrations.CreateModel(
            name='FilesBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=63, verbose_name='Заголовок блока файлов')),
            ],
            options={
                'verbose_name': 'Блок с файлами',
                'verbose_name_plural': 'Блоки с файлами',
            },
        ),
        migrations.CreateModel(
            name='GalleryBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=63, verbose_name='Заголовок блока галлереи')),
            ],
            options={
                'verbose_name': 'Блок галлереи',
                'verbose_name_plural': 'Блоки галлереи',
            },
        ),
        migrations.CreateModel(
            name='PagesBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=63, verbose_name='Заголовок блока страниц')),
            ],
            options={
                'verbose_name': 'Блок страниц',
                'verbose_name_plural': 'Блоки страниц',
            },
        ),
        migrations.CreateModel(
            name='ProductsBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=63, verbose_name='Заголовок блока с товарами')),
            ],
            options={
                'verbose_name': 'Блок товаров',
                'verbose_name_plural': 'Блоки товаров',
            },
        ),
        migrations.CreateModel(
            name='ReviewsBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=63, verbose_name='Заголовок блока с отзывами')),
            ],
            options={
                'verbose_name': 'Блок отзывов',
                'verbose_name_plural': 'Блоки отзывов',
            },
        ),
        migrations.CreateModel(
            name='SliderBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=63, verbose_name='Заголовок блока со слайдером')),
            ],
            options={
                'verbose_name': 'Блок со слайдером',
                'verbose_name_plural': 'Блоки со слайдером',
            },
        ),
        migrations.CreateModel(
            name='TitleLinkBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('title', models.CharField(max_length=125, verbose_name='Название')),
                ('btn_title', models.CharField(blank=True, default='', max_length=125, verbose_name='Название кнопки')),
                ('btn_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='title_link', to='pages.BasePage', verbose_name='Ссылка кнопки')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='titles', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Название с кнопкой',
                'verbose_name_plural': 'Названия с кнопкой',
                'ordering': ['sort'],
            },
        ),
        migrations.CreateModel(
            name='TextBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('text', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Текст')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='texts', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Текстовый блок',
                'verbose_name_plural': 'Текстовые блоки',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='SpoilerBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('header', models.CharField(max_length=125, verbose_name='Заголовок')),
                ('text', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Текст')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spoilers', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Спойлер',
                'verbose_name_plural': 'Спойлеры',
                'ordering': ['sort'],
            },
        ),
        migrations.CreateModel(
            name='SliderBlockItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/pages/content/slider/', verbose_name='Изображение')),
                ('title', models.CharField(blank=True, default='', max_length=63, verbose_name='Подпись')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slider_items', to='pages.SliderBlock')),
            ],
            options={
                'verbose_name': 'Элемент блока слайдера',
                'verbose_name_plural': 'Элементы блока слайдера',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pages.SliderBlock', verbose_name='Блок слайдера')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slider_blocks', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Слайдер',
                'verbose_name_plural': 'Слайдер',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='ShortTextBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('type', models.CharField(choices=[('qoute', 'Цитата'), ('uline', 'Подзаголовок с линией')], default='uline', max_length=7, verbose_name='Тип отображения')),
                ('text', models.TextField(verbose_name='Текст')),
                ('description', models.TextField(blank=True, default='', verbose_name='Описание')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='titles_underline', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Короткий текст',
                'verbose_name_plural': 'Короткий текст',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='ReviewsBlockItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127, verbose_name='Имя')),
                ('avatar', models.ImageField(upload_to='images/pages/content/reviews/', verbose_name='Аватар')),
                ('text', models.TextField(verbose_name='Текст отзыва')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_items', to='pages.ReviewsBlock')),
            ],
            options={
                'verbose_name': 'Элемент блока отзывов',
                'verbose_name_plural': 'Элементы блока отзывов',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pages.ReviewsBlock', verbose_name='Блок отзывов')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_blocks', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Отзывы',
                'verbose_name_plural': 'Отзывы',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='ProductsBlockItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products_items', to='pages.ProductsBlock')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Product')),
            ],
            options={
                'verbose_name': 'Элемент блока товаров',
                'verbose_name_plural': 'Элементы блока товаров',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pages.ProductsBlock', verbose_name='Блок товаров')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products_blocks', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Товары',
                'verbose_name_plural': 'Товары',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='PagesBlockItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages_items', to='pages.PagesBlock')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.BasePage', verbose_name='Страница')),
            ],
            options={
                'verbose_name': 'Элемент блока страниц',
                'verbose_name_plural': 'Элементы блока страниц',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Pages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.PagesBlock', verbose_name='Блок страниц')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages_blocks', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Страницы',
                'verbose_name_plural': 'Страницы',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Heading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255, verbose_name='SEO заголовок')),
                ('meta_description', models.TextField(blank=True, default='', help_text='\n                                        ||object|| - Заголовок объекта\n                                        ||site|| - Название сайта\n                                        ||city|| - Название города текущего поддомена\n                                        ||city1|| - Название города текущего поддомена в предложном падеже\n                                        ||price|| - Цена товара\n                                        ', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Meta Keywords')),
                ('title', models.CharField(max_length=127, verbose_name='Название')),
                ('slug', models.SlugField(verbose_name='Слаг')),
                ('domain', models.ManyToManyField(to='domains.Domain', verbose_name='Домены')),
            ],
            options={
                'verbose_name': 'Рубрика',
                'verbose_name_plural': 'Рубрики',
            },
            bases=(apps.commons.models.WithBreadcrumbs, models.Model),
        ),
        migrations.CreateModel(
            name='GalleryBlockItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/pages/content/gallery/', verbose_name='Изображение')),
                ('title', models.CharField(blank=True, default='', max_length=63, verbose_name='Подпись к файлу')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_items', to='pages.GalleryBlock')),
            ],
            options={
                'verbose_name': 'Элемент блока галлереи',
                'verbose_name_plural': 'Элементы блока галлерии',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pages.GalleryBlock', verbose_name='Блок галлереи')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_blocks', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Галлерея',
                'verbose_name_plural': 'Галлерея',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='FormBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('template_name', models.CharField(blank=True, choices=[('pages/content/coop.html', 'Сотрудничество'), ('pages/content/form.html', 'Монтаж')], default='pages/content/form.html', max_length=125, verbose_name='Форма')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forms', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Форма',
                'verbose_name_plural': 'Формы',
                'ordering': ['sort'],
            },
        ),
        migrations.CreateModel(
            name='FilesBlockItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='files/pages/content/filesblock/', verbose_name='Файл')),
                ('title', models.CharField(max_length=63, verbose_name='Подпись к файлу')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files_items', to='pages.FilesBlock')),
            ],
            options={
                'verbose_name': 'Элемент блока файлов',
                'verbose_name_plural': 'Элементы блока файлов',
            },
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.PositiveIntegerField(default=0, verbose_name='Сортировка')),
                ('block', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pages.FilesBlock', verbose_name='Блок файлов')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_blocks', to='pages.BasePage')),
            ],
            options={
                'verbose_name': 'Файлы',
                'verbose_name_plural': 'Файлы',
                'ordering': ('sort',),
            },
        ),
        migrations.AddField(
            model_name='basepage',
            name='heading',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='pages.Heading', verbose_name='Рубрика'),
        ),
        migrations.AddField(
            model_name='basepage',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pages.BasePage', verbose_name='Родительская категория'),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
            ],
            options={
                'verbose_name': 'Страница',
                'verbose_name_plural': 'Страницы',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('pages.basepage',),
            managers=[
                ('_tree_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
            ],
            options={
                'verbose_name': 'Пост',
                'verbose_name_plural': 'Посты',
                'ordering': ('-pub_date',),
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('pages.basepage',),
            managers=[
                ('_tree_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
